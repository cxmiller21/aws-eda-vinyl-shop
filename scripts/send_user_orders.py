"""
Send Mock User Orders generated by the
./scripts/generate_user_orders.py script
to an AWS API Gateway Endpoint
"""
import boto3
import json
import logging
import requests

from pathlib import Path


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

log = logging.getLogger(__name__)
log.info("Starting Send Mock User Orders Script...")

# API Gateway Global Variables
API_GATEWAY_NAME = "vinyl-order-service"
SUFFIX_API_URL = "execute-api.us-east-1.amazonaws.com"
API_STAGE = "v1"
API_PATH = "order"
SUFFIX_API_URL_FULL = f"{SUFFIX_API_URL}/{API_STAGE}/{API_PATH}"

CURRENT_DIR = Path(__file__).parent
USER_ORDERS_FILE = f"{CURRENT_DIR}/mock_user_orders.json"

log.info("Setting Boto3 client")

AWS_PROFILE = "sdg"
session = boto3.Session(profile_name=AWS_PROFILE)
apigateway = session.client("apigateway")


def get_api_gateway_id() -> str:
    """Get API Gateway ID"""
    response = apigateway.get_rest_apis()
    log.debug(f"API Gateway Response: {response}")
    for item in response["items"]:
        if item["name"] == API_GATEWAY_NAME:
            return item["id"]
    raise Exception(f"API Gateway {API_GATEWAY_NAME} not found")


def get_user_orders() -> list[dict]:
    """Get Mock User Orders"""
    with open(USER_ORDERS_FILE, "r") as f:
        user_orders = json.load(f)
    return user_orders


def send_user_order_to_api_gateway(api_gateway_id: str, user_order: dict) -> dict:
    """Send single user order to API Gateway Endpoint"""
    response = requests.post(
        f"https://{api_gateway_id}.{SUFFIX_API_URL_FULL}",
        json=user_order,
    )
    return response.status_code


def main():
    api_gateway_id = get_api_gateway_id()
    log.info(f"API Gateway ID: {api_gateway_id}")

    user_orders = get_user_orders()
    log.info(f"Sending {len(user_orders)} User Orders to API Gateway Endpoint")

    # Confirmation
    log.info("Confirm sending User Orders to API Gateway Endpoint")
    log.info(f"Are you sure you want to send {len(user_orders)} User Orders to the API Gateway Endpoint?")
    confirmation = input("Type 'yes' to confirm: ")
    if confirmation != "yes":
        log.info("Exiting...")
        exit(0)

    log.info(f"Sending {len(user_orders)} User Orders to API Gateway Endpoint")
    has_errors = False
    for user_order in user_orders:
        log.info(f"Sending User Order ID: {user_order['id']}")
        status_code = send_user_order_to_api_gateway(api_gateway_id, user_order)

        if status_code not in [200, 202]:
            has_errors = True
            log.error(f"Error sending User Order ID: {user_order['id']}")
            # log.error(f"Response: {response}")
            exit(1)
    # if has_errors:



if __name__ == "__main__":
    main()
